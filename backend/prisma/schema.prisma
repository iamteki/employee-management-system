// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Department {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  employees   Employee[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Employee {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  position    String
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  salary      Float
  joiningDate String
  user        User?      // One-to-one relation with User
  attendances Attendance[]
  leaves Leave[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  password   String
  role       String   // "admin" or "employee"
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId Int?     @unique // Optional for admin users, must be unique for the one-to-one relationship
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Attendance {
  id          Int      @id @default(autoincrement())
  employeeId  Int      // Foreign key to Employee
  employee    Employee @relation(fields: [employeeId], references: [id])
  checkIn     DateTime // Timestamp for check-in
  checkOut    DateTime? // Timestamp for check-out (nullable)
  date        DateTime @default(now()) // Date of the attendance record
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Leave {
  id          Int       @id @default(autoincrement())
  employee    Employee  @relation(fields: [employeeId], references: [id])
  employeeId  Int
  startDate   DateTime
  endDate     DateTime
  type        String    // "sick", "vacation", "personal"
  status      String    @default("pending") // "pending", "approved", "rejected"
  reason      String
  adminNote   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

}

